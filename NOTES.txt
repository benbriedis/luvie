
MIDI monitoring: use gmidimonitor  (in Ubuntu repo)


- change the URLs to my Github account


Tools
-----
lv2lint    to check plugin
valgrind   for memory issues

ninja!	Try this to speed up builds


Plugin structures
-----------------
1. Monolithic, but with internal API
   PRO can share the graphics library
   PRO gui can easily be split into tabs etc
   PRO dont have multiple plugins appear in Ardour that are somehow loosely connected

2. Both an LV2 host and client.
   Clients have extensions... eg option/requirement to share the host GUI.
   Probably have some 'built in' plugins.
   PRO child plugins could possibly be run separately if desired.
   PRO allows for separate development of parts.
   PRO other plugins could perhaps be run with constraints. 
       eg play one pattern per instance, bring their own GUIs.
	   We probably control their transport.
	   This is could a type 'trigger' situation. Still a place for a MIDI trigger plugin.
        

3. The Song editor is a 'peer' plugin
   Extensions required for discovery between plugins and maybe saving data.
   PRO maybe easier...
   CON probably liable to be confusing at the end of the day.

Alternatives to using JSON for storage
--------------------------------------
https://dev.to/nikl/json-is-slower-here-are-its-4-faster-alternatives-2g30


Libraries
---------
sndfile    for audio file handling I think

Packaging... alternative to JUCE I guess...
============================================
https://distrho.github.io/DPF/
https://distrho.github.io/DPF/index.html
https://github.com/DISTRHO/DPF/blob/main/FEATURES.md

	... Suspect using this would make the song editor harder. Would probably need to add extensions etc

Display Idea
============
If a pattern is offset in the song editor (also cf the live looper), show where the pattern and/or its bars 
(if there are multiple bars in the pattern) start and end with some lines:

          +-!-----+
 +------+-|-!--+--|---+------+------+------+------+
 +------+-|-!--+--|---+------+------+------+------+
          +-!-----+

Can/should I support other plugins from the song editor?
========================================================
- May be able to run a simple sequencer or drum machine by wrapping it in something simple.

Can/should I allow my plugins to be run without the song editor?
================================================================
- If its not too hard, perhaps support in 'single pattern' and/or 'single play' mode or something.



Ingen 
=====
Is another LV2 plugin in a plugin
https://lac.linuxaudio.org/2015/papers/24.pdf
https://gitlab.com/drobilla/ingen

NON - look at these 
===================
https://non.tuxfamily.org/wiki/Non%20Timeline
+ the sequencer

CV Resources
============
https://www.cycfi.com/2025/09/cv-to-midi-a-practical-guide/#:~:text=Essentially%2C%20CV%20is%20MIDI's%20analog,filter%20or%20bends%20a%20note.
https://linuxmusicians.com/viewtopic.php?t=20701


LV2 Position data (ie transport data) notes
===========================================

	We get Position objects.
	These are superclasses of Rate and Time objects.
	The objects we get contain data from both.

	We dont not seem to receive:
		position
		time_beat
		framesPerSecond   (note we get the sampleRate separately)

So in practice we get:
	speed: 1.000000  		<-- Goes to 0 when stopped. NB if jogging or something run() just gets called more or less I think.
	bpm: 120.000000			<-- Need this to calculate when to play notes.
	frame: 752234			<-- Is the most solid item esp for transport jumps. Note that BPM changes need to be taken into account.
	time_bar: 8
	barBeat: 2.115104
	beatsPerBar: 4.000000
	beatUnit: 4

